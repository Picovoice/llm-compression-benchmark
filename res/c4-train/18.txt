This construct is used to represent the classic systems engineering activity, function or task.
In the system model, an 'Action' entity is used to represent an 'Action' construct with a decomposes/decomposed by relationship to the diagram's root 'Action' entity. Innoslate's default database schema includes labels to specify the type of 'Action' entity as a(n) Activity, Capability, Function, Mission, Process, Program, Project, Task, and/or Use Case.
In the diagram, this construct is represented as a rounded block containing the number and name of the 'Action' construct.
This construct allows two or more 'Action' constructs to perform simultaneously. Each parallel branch is unique and all branches execute at the same time during simulation. No changes are made to the system model in the database. In the diagram, the point where the arrow lines diverge is the start of the individual 'Parallel' branches and the point where the arrow lines converge is the end of the 'Parallel' branches.
This construct is used to represent a function which has two or more potential exit branches and allows 'Action' constructs to be performed only under certain conditions. Each 'OR' exit branch is unique and only one of the many branches will execute during simulation.
In the system model, an Action entity is used to represent an 'OR' construct with a decomposes/decomposed by relationship to the diagram's root Action entity. Innoslate's default database schema includes labels to specify the type of this Action entity as a(n) Activity, Capability, Function, Mission, Process, Program, Project, Task, and/or Use Case.
In the diagram, this construct is represented as a rounded block with a diamond shape entry point making up the left-hand side. This block contains the number and name of the 'OR'. The point where the arrow lines diverge out from the right of the block is the start of the individual 'OR' exit branches and the point where the arrow lines converge is the end of the 'OR' exit branches.
This construct is used to control timeouts of the 'Action' constructs inside the 'SYNC' construct's parallel branches. Each parallel branch is unique and all branches execute at the same time during simulation.
In the system model, an Action entity is used to represent a 'SYNC' construct with a decomposes/decomposed by relationship to the diagram's root Action entity. Innoslate's default database schema includes labels to specify the type of this Action entity as a(n) Activity, Capability, Function, Mission, Process, Program, Project, Task, and/or Use Case.
In the diagram, this construct is represented as a rounded block with a diamond shape exit point making up the right-hand side. This block contains the number and name of the 'SYNC'. The point where the arrow lines diverge is the start of the individual 'SYNC' branches and the point when the arrow lines converge back into the block is the end of the 'SYNC' branches.
This construct allows an 'Action' construct or a set of 'Action' constructs to be repeated multiple times. During a simulation the number of 'LOOP' executions can be automated or you can be prompted for the number.
In the system model, an Action entity is used to represent a 'LOOP' construct with a decomposes/decomposed by relationship to the diagram's root Action entity. Innoslate's default database schema includes labels to specify the type of this Action entity as a(n) Activity, Capability, Function, Mission, Process, Program, Project, Task, and/or Use Case.
In the diagram, this construct is represented as a rounded block with a diamond shape entry point making up the left-hand side. This block contains the number and name of the 'LOOP'. The arrow line that points back to the top of the block is the 'LOOP' construct's "Continue" branch and the arrow line leaving the bottom of the block is the 'LOOP' construct's "Exit" branch.
This construct is a functional representation of data that is passed between 'Action' constructs.
In the system model, an Input/Output entity is used to represent an 'Input/Output' construct with at least one generated by/generates relationship to an Action entity representing an 'Action' construct and at least one received by/receives relationship to another Action entity representing an 'Action' construct in the diagram. The received by/receives relationship has an attribute named 'Trigger' which is used to specify whether the passed data is required before the next 'Action' can be performed or if it is optional. Innoslate's default database schema includes labels to specify the type of this Input/Output entity as Analog, Digital, Event, Mixed, Physical, Product, Response, and/or Verbal.
In the diagram, this construct is represented as either a bright green or a muted grey parallelogram with dashed arrow lines between itself and the 'Action' constructs which have relationships to the 'Input/Output'. If the 'Trigger' attribute is set to true on the received by/receives relationship, the 'Input/Output' will display as bright green, otherwise if the 'Trigger' attribute is set to false, it will display as muted grey in the diagram.
This construct provides a way to visualize swim lanes by specifying who performs the functions on a particular 'Parallel' construct's branch.
In the system model, an Asset entity is used to represent a 'Branch Asset' construct with a performs/performed by relationship to each of the Action entities representing the 'Action' constructs on the 'Parallel' branch. Innoslate's default database schema includes labels to specify the type of this Asset entity as a(n) Architecture, Context, Environment, External System, Facility, Infrastructure, Materiale, Organization, Package, Personnel, Segment, Service, Subsystem, and/or System.
In the diagram, this construct is represented as a line label on a 'Parallel' branch, containing the name of the 'Branch Asset'.
This construct provides a visual representation of a physical object that is consumed, produced or seized by a function. The usage of each 'Resource' is monitored during simulation and graphically displayed in the simulation results.
In the system model, a Resource entity is used to represent a 'Resource' construct with either a consumed by/consumes, produced by/produces or a seized by/seizes relationship to an Action entity representing an 'Action' construct in the diagram.
In the diagram, this construct is represented as either a bright purple or a muted purple elongated hexagon with a dashed arrow line between itself and the 'Action' construct which has relationships to the 'Resource'. If the 'Resource' is consumed or produced, it will display as bright purple, otherwise if the 'Resource' is seized, it will display as muted purple in the diagram.
In the system model, an ‘Action’ entity is used to represent an ‘Action’ construct with a decomposes/decomposed by relationship to the diagram’s root ‘Action’ entity. Innoslate‘s default database schema includes labels to specify the type of ‘Action’ entity as a(n) Activity, Capability, Function, Mission, Process, Program, Project, Task, and/or Use Case.
In the diagram, this construct is represented as a rounded block containing the number and name of the ‘Action’ construct.
This construct allows two or more ‘Action’ constructs to perform simultaneously. Each parallel branch is unique and all branches execute at the same time during simulation. No changes are made to the system model in the database. In the diagram, the point where the arrow lines diverge is the start of the individual ‘Parallel’ branches and the point where the arrow lines converge is the end of the ‘Parallel’ branches.
This construct is used to represent a function which has two or more potential exit branches and allows ‘Action’ constructs to be performed only under certain conditions. Each ‘OR’ exit branch is unique and only one of the many branches will execute during simulation.
In the system model, an Action entity is used to represent an ‘OR’ construct with a decomposes/decomposed by relationship to the diagram’s root Action entity. Innoslate‘s default database schema includes labels to specify the type of this Action entity as a(n) Activity, Capability, Function, Mission, Process, Program, Project, Task, and/or Use Case.
In the diagram, this construct is represented as a rounded block with a diamond shape entry point making up the left-hand side. This block contains the number and name of the ‘OR’. The point where the arrow lines diverge out from the right of the block is the start of the individual ‘OR’ exit branches and the point where the arrow lines converge is the end of the ‘OR’ exit branches.
This construct is used to control timeouts of the ‘Action’ constructs inside the ‘SYNC’ construct’s parallel branches. Each parallel branch is unique and all branches execute at the same time during simulation.
In the system model, an Action entity is used to represent a ‘SYNC’ construct with a decomposes/decomposed by relationship to the diagram’s root Action entity. Innoslate‘s default database schema includes labels to specify the type of this Action entity as a(n) Activity, Capability, Function, Mission, Process, Program, Project, Task, and/or Use Case.
In the diagram, this construct is represented as a rounded block with a diamond shape exit point making up the right-hand side. This block contains the number and name of the ‘SYNC’. The point where the arrow lines diverge is the start of the individual ‘SYNC’ branches and the point when the arrow lines converge back into the block is the end of the ‘SYNC’ branches.
This construct allows an ‘Action’ construct or a set of ‘Action’ constructs to be repeated multiple times. During a simulation the number of ‘LOOP’ executions can be automated or you can be prompted for the number.
In the system model, an Action entity is used to represent a ‘LOOP’ construct with a decomposes/decomposed by relationship to the diagram’s root Action entity. Innoslate‘s default database schema includes labels to specify the type of this Action entity as a(n) Activity, Capability, Function, Mission, Process, Program, Project, Task, and/or Use Case.
In the diagram, this construct is represented as a rounded block with a diamond shape entry point making up the left-hand side. This block contains the number and name of the ‘LOOP’. The arrow line that points back to the top of the block is the ‘LOOP’ construct’s “Continue” branch and the arrow line leaving the bottom of the block is the ‘LOOP’ construct’s “Exit” branch.
This construct is a functional representation of data that is passed between ‘Action’ constructs.
In the system model, an Input/Output entity is used to represent an ‘Input/Output’ construct with at least one generated by/generates relationship to an Action entity representing an ‘Action’ construct and at least one received by/receives relationship to another Action entity representing an ‘Action’ construct in the diagram. The received by/receives relationship has an attribute named ‘Trigger’ which is used to specify whether the passed data is required before the next ‘Action’ can be performed or if it is optional. Innoslate‘s default database schema includes labels to specify the type of this Input/Output entity as Analog, Digital, Event, Mixed, Physical, Product, Response, and/or Verbal.
In the diagram, this construct is represented as either a bright green or a muted grey parallelogram with dashed arrow lines between itself and the ‘Action’ constructs which have relationships to the ‘Input/Output’. If the ‘Trigger’ attribute is set to true on the received by/receives relationship, the ‘Input/Output’ will display as bright green, otherwise if the ‘Trigger’ attribute is set to false, it will display as muted grey in the diagram.
This construct provides a way to visualize swim lanes by specifying who performs the functions on a particular ‘Parallel’ construct’s branch.
In the system model, an Asset entity is used to represent a ‘Branch Asset’ construct with a performs/performed by relationship to each of the Action entities representing the ‘Action’ constructs on the ‘Parallel’ branch. Innoslate‘s default database schema includes labels to specify the type of this Asset entity as a(n) Architecture, Context, Environment, External System, Facility, Infrastructure, Materiale, Organization, Package, Personnel, Segment, Service, Subsystem, and/or System.
In the diagram, this construct is represented as a line label on a ‘Parallel’ branch, containing the name of the ‘Branch Asset’.
This construct provides a visual representation of a physical object that is consumed, produced or seized by a function. The usage of each ‘Resource’ is monitored during simulation and graphically displayed in the simulation results.
In the system model, a Resource entity is used to represent a ‘Resource’ construct with either a consumed by/consumes, produced by/produces or a seized by/seizes relationship to an Action entity representing an ‘Action’ construct in the diagram.
In the diagram, this construct is represented as either a bright purple or a muted purple elongated hexagon with a dashed arrow line between itself and the ‘Action’ construct which has relationships to the ‘Resource’. If the ‘Resource’ is consumed or produced, it will display as bright purple, otherwise if the ‘Resource’ is seized, it will display as muted purple in the diagram.